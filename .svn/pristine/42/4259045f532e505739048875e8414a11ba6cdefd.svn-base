// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using inventory_dot_core.Models;

namespace inventory_dot_core.Migrations.inventory
{
    [DbContext(typeof(InventoryContext))]
    partial class inventoryContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("Relational:Sequence:.ab_id_seq", "'ab_id_seq', '', '1', '1', '', '', 'Int64', 'False'")
                .HasAnnotation("Relational:Sequence:.ac_id_seq", "'ac_id_seq', '', '1', '1', '', '', 'Int64', 'False'")
                .HasAnnotation("Relational:Sequence:.acc_id_seq", "'acc_id_seq', '', '1', '1', '', '', 'Int64', 'False'")
                .HasAnnotation("Relational:Sequence:.ap_id_seq", "'ap_id_seq', '', '1', '1', '', '', 'Int64', 'False'")
                .HasAnnotation("Relational:Sequence:.at_id_seq", "'at_id_seq', '', '1', '1', '', '', 'Int64', 'False'")
                .HasAnnotation("Relational:Sequence:.dep_id_seq", "'dep_id_seq', '', '1', '1', '', '', 'Int64', 'False'")
                .HasAnnotation("Relational:Sequence:.empl_id_seq", "'empl_id_seq', '', '1', '1', '', '', 'Int64', 'False'")
                .HasAnnotation("Relational:Sequence:.house_id_seq", "'house_id_seq', '', '1', '1', '', '', 'Int64', 'False'")
                .HasAnnotation("Relational:Sequence:.office_id_seq", "'office_id_seq', '', '1', '1', '', '', 'Int64', 'False'")
                .HasAnnotation("Relational:Sequence:.pos_id_seq", "'pos_id_seq', '', '1', '1', '', '', 'Int64', 'False'")
                .HasAnnotation("Relational:Sequence:.rel_hard_empl_id_seq", "'rel_hard_empl_id_seq', '', '1', '1', '', '', 'Int64', 'False'")
                .HasAnnotation("Relational:Sequence:.rel_office_resp_seq", "'rel_office_resp_seq', '', '1', '1', '', '', 'Int64', 'False'")
                .HasAnnotation("Relational:Sequence:.rel_soft_hard_seq", "'rel_soft_hard_seq', '', '1', '1', '', '', 'Int64', 'False'")
                .HasAnnotation("Relational:Sequence:.whard_id_seq", "'whard_id_seq', '', '1', '1', '', '', 'Int64', 'False'")
                .HasAnnotation("Relational:Sequence:.wsoft_id_seq", "'wsoft_id_seq', '', '1', '1', '', '', 'Int64', 'False'")
                .HasAnnotation("Relational:Sequence:.wtype_id_seq", "'wtype_id_seq', '', '1', '1', '', '', 'Int64', 'False'");

            modelBuilder.Entity("inventory_dot_core.Models.AccountingBatteries", b =>
                {
                    b.Property<int>("AbId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ab_id")
                        .HasDefaultValueSql("nextval('inventory.ab_id_seq'::regclass)");

                    b.Property<int>("AbBatWhardId")
                        .HasColumnName("ab_bat_whard_id");

                    b.Property<int?>("AbWhardId")
                        .HasColumnName("ab_whard_id");

                    b.HasKey("AbId")
                        .HasName("AccountingBatteries_pkey");

                    b.HasIndex("AbBatWhardId");

                    b.HasIndex("AbWhardId");

                    b.ToTable("AccountingBatteries","inventory");
                });

            modelBuilder.Entity("inventory_dot_core.Models.AccountingCartridges", b =>
                {
                    b.Property<int>("AcId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ac_id")
                        .HasDefaultValueSql("nextval('inventory.ac_id_seq'::regclass)");

                    b.Property<int>("AcCartWhardId")
                        .HasColumnName("ac_cart_whard_id");

                    b.Property<int?>("AcWhardId")
                        .HasColumnName("ac_whard_id");

                    b.HasKey("AcId")
                        .HasName("AccountingCartridges_pkey");

                    b.HasIndex("AcCartWhardId");

                    b.HasIndex("AcWhardId");

                    b.ToTable("AccountingCartridges","inventory");
                });

            modelBuilder.Entity("inventory_dot_core.Models.AccountingPhones", b =>
                {
                    b.Property<int>("ApId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ap_id")
                        .HasDefaultValueSql("nextval('inventory.ap_id_seq'::regclass)");

                    b.Property<int>("ApEmployeeId")
                        .HasColumnName("ap_employee_id");

                    b.Property<string>("ApImei")
                        .HasColumnName("ap_imei")
                        .HasMaxLength(15);

                    b.Property<string>("ApInumber")
                        .IsRequired()
                        .HasColumnName("ap_inumber")
                        .HasMaxLength(30);

                    b.Property<int>("ApPhoneHwId")
                        .HasColumnName("ap_phone_hw_id");

                    b.Property<string>("ApTnumber")
                        .HasColumnName("ap_tnumber")
                        .HasMaxLength(17);

                    b.HasKey("ApId")
                        .HasName("Accounting_Phones_pkey");

                    b.HasIndex("ApEmployeeId");

                    b.HasIndex("ApPhoneHwId");

                    b.ToTable("Accounting_Phones","inventory");
                });

            modelBuilder.Entity("inventory_dot_core.Models.AccountingTires", b =>
                {
                    b.Property<int>("AtId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("at_id")
                        .HasDefaultValueSql("nextval('inventory.at_id_seq'::regclass)");

                    b.Property<string>("AtCode")
                        .HasColumnName("at_code")
                        .HasMaxLength(255);

                    b.Property<decimal?>("AtCost")
                        .HasColumnName("at_cost")
                        .HasColumnType("numeric(8,2)");

                    b.Property<int>("AtCount")
                        .HasColumnName("at_count");

                    b.Property<string>("AtIauto")
                        .HasColumnName("at_iauto")
                        .HasMaxLength(255);

                    b.Property<string>("AtName")
                        .HasColumnName("at_name")
                        .HasMaxLength(255);

                    b.HasKey("AtId")
                        .HasName("AccountingTires_pkey");

                    b.ToTable("AccountingTires","inventory");
                });

            modelBuilder.Entity("inventory_dot_core.Models.Accounts", b =>
                {
                    b.Property<int>("AccountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("account_id")
                        .HasDefaultValueSql("nextval('inventory.acc_id_seq'::regclass)");

                    b.Property<int?>("AccountEmployeeId")
                        .HasColumnName("account_employee_id");

                    b.Property<string>("AccountPass")
                        .HasColumnName("account_pass")
                        .HasMaxLength(255);

                    b.Property<string>("AccountPermission")
                        .HasColumnName("account_permission")
                        .HasMaxLength(4);

                    b.Property<string>("AccountUserLogin")
                        .HasColumnName("account_user_login")
                        .HasMaxLength(255);

                    b.HasKey("AccountId")
                        .HasName("Accounts_pkey");

                    b.ToTable("Accounts","inventory");
                });

            modelBuilder.Entity("inventory_dot_core.Models.Departments", b =>
                {
                    b.Property<int>("DepartmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("department_id")
                        .HasDefaultValueSql("nextval('inventory.dep_id_seq'::regclass)");

                    b.Property<string>("DepartmentName")
                        .HasColumnName("department_name")
                        .HasMaxLength(255);

                    b.Property<string>("DepartmentNotes")
                        .HasColumnName("department_notes")
                        .HasMaxLength(4000);

                    b.Property<int?>("DepartmentParentId")
                        .HasColumnName("department_parent_id");

                    b.Property<int>("DepartmentRegionId")
                        .HasColumnName("department_region_id");

                    b.HasKey("DepartmentId")
                        .HasName("Departments_pkey");

                    b.HasIndex("DepartmentParentId");

                    b.HasIndex("DepartmentRegionId")
                        .HasName("departments_department_region_id_idx");

                    b.ToTable("Departments","inventory");
                });

            modelBuilder.Entity("inventory_dot_core.Models.Employees", b =>
                {
                    b.Property<int>("EmployeeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("employee_id")
                        .HasDefaultValueSql("nextval('inventory.empl_id_seq'::regclass)");

                    b.Property<string>("EmployeeEmail")
                        .HasColumnName("employee_email")
                        .HasMaxLength(255);

                    b.Property<string>("EmployeeFirstname")
                        .IsRequired()
                        .HasColumnName("employee_firstname")
                        .HasMaxLength(255);

                    b.Property<string>("EmployeeFullFio")
                        .HasColumnName("employee_full_fio")
                        .HasMaxLength(255);

                    b.Property<int?>("EmployeeIsChief")
                        .HasColumnName("employee_is_chief");

                    b.Property<int?>("EmployeeIsMol")
                        .HasColumnName("employee_is_mol");

                    b.Property<int?>("EmployeeIsRespons")
                        .HasColumnName("employee_is_respons");

                    b.Property<string>("EmployeeLastname")
                        .IsRequired()
                        .HasColumnName("employee_lastname")
                        .HasMaxLength(255);

                    b.Property<string>("EmployeeMiddlename")
                        .IsRequired()
                        .HasColumnName("employee_middlename")
                        .HasMaxLength(30);

                    b.Property<string>("EmployeeNote")
                        .HasColumnName("employee_note")
                        .HasMaxLength(255);

                    b.Property<int>("EmployeeOfficeId")
                        .HasColumnName("employee_office_id");

                    b.Property<string>("EmployeePhoneHome")
                        .HasColumnName("employee_phone_home")
                        .HasMaxLength(255);

                    b.Property<string>("EmployeePhoneWork")
                        .HasColumnName("employee_phone_work")
                        .HasMaxLength(255);

                    b.Property<int>("EmployeePositionId")
                        .HasColumnName("employee_position_id");

                    b.Property<int>("EmployeeRegionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("employee_region_id")
                        .HasDefaultValueSql("54");

                    b.Property<int?>("UserId")
                        .HasColumnName("user_id");

                    b.HasKey("EmployeeId")
                        .HasName("Employees_pkey");

                    b.HasIndex("EmployeeFullFio")
                        .HasName("employees_employee_full_fio_idx");

                    b.HasIndex("EmployeeIsMol")
                        .HasName("employees_employee_is_mol_idx");

                    b.HasIndex("EmployeeIsRespons")
                        .HasName("employees_employee_is_respons_idx");

                    b.HasIndex("EmployeeLastname")
                        .HasName("employees_employee_lastname_idx");

                    b.HasIndex("EmployeeOfficeId");

                    b.HasIndex("EmployeePositionId");

                    b.HasIndex("EmployeeRegionId")
                        .HasName("employees_employee_region_id_idx");

                    b.ToTable("Employees","inventory");
                });

            modelBuilder.Entity("inventory_dot_core.Models.Houses", b =>
                {
                    b.Property<int>("HousesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("houses_id")
                        .HasDefaultValueSql("nextval('inventory.house_id_seq'::regclass)");

                    b.Property<string>("HousesName")
                        .HasColumnName("houses_name")
                        .HasMaxLength(255);

                    b.Property<int>("HousesRegionId")
                        .HasColumnName("houses_region_id");

                    b.Property<string>("HousesRem")
                        .HasColumnName("houses_rem")
                        .HasMaxLength(255);

                    b.HasKey("HousesId");

                    b.HasIndex("HousesName")
                        .HasName("houses_houses_name_idx");

                    b.HasIndex("HousesRegionId")
                        .HasName("fki_Houses_Region_id");

                    b.ToTable("Houses","inventory");
                });

            modelBuilder.Entity("inventory_dot_core.Models.Offices", b =>
                {
                    b.Property<int>("OfficeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("office_id")
                        .HasDefaultValueSql("nextval('inventory.office_id_seq'::regclass)");

                    b.Property<int>("OfficeHousesId")
                        .HasColumnName("office_houses_id");

                    b.Property<int>("OfficeIsStore")
                        .HasColumnName("office_is_store");

                    b.Property<string>("OfficeName")
                        .IsRequired()
                        .HasColumnName("office_name")
                        .HasMaxLength(255);

                    b.Property<string>("OfficeNotes")
                        .HasColumnName("office_notes")
                        .HasMaxLength(4000);

                    b.HasKey("OfficeId")
                        .HasName("Offices_pkey");

                    b.HasIndex("OfficeHousesId");

                    b.HasIndex("OfficeName")
                        .HasName("offices_office_name_idx");

                    b.ToTable("Offices","inventory");
                });

            modelBuilder.Entity("inventory_dot_core.Models.Positions", b =>
                {
                    b.Property<int>("PositionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("position_id")
                        .HasDefaultValueSql("nextval('inventory.pos_id_seq'::regclass)");

                    b.Property<int>("PositionDepartmentId")
                        .HasColumnName("position_department_id");

                    b.Property<string>("PositionName")
                        .HasColumnName("position_name")
                        .HasMaxLength(255);

                    b.Property<string>("PositionNotes")
                        .HasColumnName("position_notes")
                        .HasMaxLength(255);

                    b.HasKey("PositionId")
                        .HasName("Positions_pkey");

                    b.HasIndex("PositionDepartmentId");

                    b.HasIndex("PositionName")
                        .HasName("positions_position_name_idx");

                    b.ToTable("Positions","inventory");
                });

            modelBuilder.Entity("inventory_dot_core.Models.Region", b =>
                {
                    b.Property<int>("RegionId")
                        .HasColumnName("region_id");

                    b.Property<string>("RegionName")
                        .IsRequired()
                        .HasColumnName("region_name")
                        .HasMaxLength(255);

                    b.HasKey("RegionId");

                    b.ToTable("Region","inventory");
                });

            modelBuilder.Entity("inventory_dot_core.Models.RelHardwareEmployee", b =>
                {
                    b.Property<int>("RelheId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("relhe_id")
                        .HasDefaultValueSql("nextval('inventory.rel_hard_empl_id_seq'::regclass)");

                    b.Property<int>("RelheEmployeeId")
                        .HasColumnName("relhe_employee_id");

                    b.Property<int>("RelheWhardId")
                        .HasColumnName("relhe_whard_id");

                    b.HasKey("RelheId")
                        .HasName("Rel_Hardware_Employee_pkey");

                    b.HasIndex("RelheEmployeeId")
                        .HasName("rel_hardware_employee_relhe_employee_id_idx");

                    b.HasIndex("RelheWhardId")
                        .HasName("rel_hardware_employee_relhe_whard_id_idx");

                    b.ToTable("Rel_Hardware_Employee","inventory");
                });

            modelBuilder.Entity("inventory_dot_core.Models.RelOfficeResponsEmployee", b =>
                {
                    b.Property<int>("RoeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("roe_id")
                        .HasDefaultValueSql("nextval('inventory.rel_office_resp_seq'::regclass)");

                    b.Property<int>("RoeEmployeeId")
                        .HasColumnName("roe_employee_id");

                    b.Property<int>("RoeOfficeId")
                        .HasColumnName("roe_office_id");

                    b.HasKey("RoeId")
                        .HasName("Rel_Office_Respons_Employee_pkey");

                    b.HasIndex("RoeEmployeeId")
                        .HasName("rel_office_respons_employee_roe_employee_id_idx");

                    b.HasIndex("RoeOfficeId")
                        .HasName("rel_office_respons_employee_roe_office_id_idx");

                    b.ToTable("Rel_Office_Respons_Employee","inventory");
                });

            modelBuilder.Entity("inventory_dot_core.Models.RelSoftwareHardware", b =>
                {
                    b.Property<int>("RelshId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("relsh_id")
                        .HasDefaultValueSql("nextval('inventory.rel_soft_hard_seq'::regclass)");

                    b.Property<int>("RelshWhardId")
                        .HasColumnName("relsh_whard_id");

                    b.Property<int>("RelshWsoftId")
                        .HasColumnName("relsh_wsoft_id");

                    b.HasKey("RelshId")
                        .HasName("Rel_Software_Hardware_pkey");

                    b.HasIndex("RelshWhardId")
                        .HasName("rel_software_hardware_relsh_whard_id_idx");

                    b.HasIndex("RelshWsoftId")
                        .HasName("rel_software_hardware_relsh_wsoft_id_idx");

                    b.ToTable("Rel_Software_Hardware","inventory");
                });

            modelBuilder.Entity("inventory_dot_core.Models.WealthCategories", b =>
                {
                    b.Property<int>("WcatId")
                        .HasColumnName("wcat_id");

                    b.Property<string>("Wcatname")
                        .IsRequired()
                        .HasColumnName("wcatname")
                        .HasMaxLength(255);

                    b.Property<string>("Wcatnotes")
                        .HasColumnName("wcatnotes")
                        .HasMaxLength(4000);

                    b.HasKey("WcatId")
                        .HasName("Wealth_Categories_pkey");

                    b.ToTable("Wealth_Categories","inventory");
                });

            modelBuilder.Entity("inventory_dot_core.Models.WealthHardware", b =>
                {
                    b.Property<int>("WhardId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("whard_id")
                        .HasDefaultValueSql("nextval('inventory.whard_id_seq'::regclass)");

                    b.Property<int>("IsSoftDeployed")
                        .HasColumnName("is_soft_deployed");

                    b.Property<int?>("WhardArchiv")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("whard_archiv")
                        .HasDefaultValueSql("0");

                    b.Property<DateTime?>("WhardCreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("whard_create_date")
                        .HasColumnType("date")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("WhardDateOfAdoption")
                        .HasColumnName("whard_date_of_adoption")
                        .HasColumnType("date");

                    b.Property<string>("WhardFnumber")
                        .HasColumnName("whard_fnumber")
                        .HasMaxLength(65);

                    b.Property<decimal?>("WhardInitialCost")
                        .HasColumnName("whard_initial_cost")
                        .HasColumnType("numeric(18,2)");

                    b.Property<string>("WhardInumber")
                        .HasColumnName("whard_inumber")
                        .HasMaxLength(30);

                    b.Property<int?>("WhardMolEmployeeId")
                        .HasColumnName("whard_mol_employee_id");

                    b.Property<string>("WhardName")
                        .HasColumnName("whard_name")
                        .HasMaxLength(255);

                    b.Property<string>("WhardNote")
                        .HasColumnName("whard_note")
                        .HasMaxLength(255);

                    b.Property<int>("WhardOfficeId")
                        .HasColumnName("whard_office_id");

                    b.Property<int?>("WhardRegionId")
                        .HasColumnName("whard_region_id");

                    b.Property<decimal?>("WhardResidualValue")
                        .HasColumnName("whard_residual_value")
                        .HasColumnType("numeric(18,2)");

                    b.Property<int>("WhardWcatId")
                        .HasColumnName("whard_wcat_id");

                    b.Property<int>("WhardWtypeId")
                        .HasColumnName("whard_wtype_id");

                    b.HasKey("WhardId")
                        .HasName("Wealth_Hardware_pkey");

                    b.HasIndex("WhardFnumber")
                        .HasName("wealth_hardware_whard_fnumber_idx");

                    b.HasIndex("WhardInumber")
                        .HasName("wealth_hardware_whard_inumber_idx");

                    b.HasIndex("WhardMolEmployeeId");

                    b.HasIndex("WhardName")
                        .HasName("wealth_hardware_whard_name_idx");

                    b.HasIndex("WhardOfficeId");

                    b.HasIndex("WhardRegionId")
                        .HasName("wealth_hardware_whard_region_id_idx");

                    b.HasIndex("WhardWcatId")
                        .HasName("wealth_hardware_whard_wcat_id_idx");

                    b.HasIndex("WhardWtypeId")
                        .HasName("wealth_hardware_whard_wtype_id_idx");

                    b.ToTable("Wealth_Hardware","inventory");
                });

            modelBuilder.Entity("inventory_dot_core.Models.WealthSoftware", b =>
                {
                    b.Property<int>("WsoftId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("wsoft_id")
                        .HasDefaultValueSql("nextval('inventory.wsoft_id_seq'::regclass)");

                    b.Property<int?>("WsoftArchiv")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("wsoft_archiv")
                        .HasDefaultValueSql("0");

                    b.Property<int>("WsoftCnt")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("wsoft_cnt")
                        .HasDefaultValueSql("1")
                        .HasAnnotation("Npgsql:Comment", "Количество лицензий");

                    b.Property<DateTime?>("WsoftCreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("wsoft_create_date")
                        .HasColumnType("date")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime?>("WsoftDateOfAdoption")
                        .HasColumnName("wsoft_date_of_adoption")
                        .HasColumnType("date");

                    b.Property<string>("WsoftFnumber")
                        .HasColumnName("wsoft_fnumber")
                        .HasMaxLength(65);

                    b.Property<decimal?>("WsoftInitialCost")
                        .HasColumnName("wsoft_initial_cost")
                        .HasColumnType("numeric(18,2)");

                    b.Property<string>("WsoftInumber")
                        .HasColumnName("wsoft_inumber")
                        .HasMaxLength(30);

                    b.Property<string>("WsoftName")
                        .IsRequired()
                        .HasColumnName("wsoft_name")
                        .HasMaxLength(255);

                    b.Property<string>("WsoftNote")
                        .HasColumnName("wsoft_note")
                        .HasMaxLength(255);

                    b.Property<int>("WsoftRegionId")
                        .HasColumnName("wsoft_region_id");

                    b.Property<decimal?>("WsoftResidualValue")
                        .HasColumnName("wsoft_residual_value")
                        .HasColumnType("numeric(18,2)");

                    b.Property<int?>("WsoftWcatId")
                        .HasColumnName("wsoft_wcat_id");

                    b.Property<int?>("WsoftWtypeId")
                        .HasColumnName("wsoft_wtype_id");

                    b.HasKey("WsoftId")
                        .HasName("Wealth_Software_pkey");

                    b.HasIndex("WsoftRegionId");

                    b.HasIndex("WsoftWcatId");

                    b.HasIndex("WsoftWtypeId");

                    b.ToTable("Wealth_Software","inventory");
                });

            modelBuilder.Entity("inventory_dot_core.Models.WealthTypes", b =>
                {
                    b.Property<int>("WtypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("wtype_id")
                        .HasDefaultValueSql("nextval('inventory.wtype_id_seq'::regclass)");

                    b.Property<string>("WtypeName")
                        .IsRequired()
                        .HasColumnName("wtype_name")
                        .HasMaxLength(64);

                    b.Property<string>("WtypeNotes")
                        .HasColumnName("wtype_notes")
                        .HasMaxLength(2048);

                    b.HasKey("WtypeId")
                        .HasName("Wealth_Types_pkey");

                    b.HasIndex("WtypeName")
                        .HasName("wealth_types_wtype_name_idx");

                    b.ToTable("Wealth_Types","inventory");
                });

            modelBuilder.Entity("inventory_dot_core.Models.AccountingBatteries", b =>
                {
                    b.HasOne("inventory_dot_core.Models.WealthHardware", "AbBatWhard")
                        .WithMany("AccountingBatteriesAbBatWhard")
                        .HasForeignKey("AbBatWhardId")
                        .HasConstraintName("accountingbatteries_wealth_hardware_fk_bat")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("inventory_dot_core.Models.WealthHardware", "AbWhard")
                        .WithMany("AccountingBatteriesAbWhard")
                        .HasForeignKey("AbWhardId")
                        .HasConstraintName("accountingbatteries_wealth_hardware_fk")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("inventory_dot_core.Models.AccountingCartridges", b =>
                {
                    b.HasOne("inventory_dot_core.Models.WealthHardware", "AcCartWhard")
                        .WithMany("AccountingCartridgesAcCartWhard")
                        .HasForeignKey("AcCartWhardId")
                        .HasConstraintName("accountingcartridges_wealth_hardware_fk_cart")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("inventory_dot_core.Models.WealthHardware", "AcWhard")
                        .WithMany("AccountingCartridgesAcWhard")
                        .HasForeignKey("AcWhardId")
                        .HasConstraintName("accountingcartridges_wealth_hardware_fk")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("inventory_dot_core.Models.AccountingPhones", b =>
                {
                    b.HasOne("inventory_dot_core.Models.Employees", "ApEmployee")
                        .WithMany("AccountingPhones")
                        .HasForeignKey("ApEmployeeId")
                        .HasConstraintName("accounting_phones_employees_fk")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("inventory_dot_core.Models.WealthHardware", "ApPhoneHw")
                        .WithMany("AccountingPhones")
                        .HasForeignKey("ApPhoneHwId")
                        .HasConstraintName("accounting_phones_wealth_hardware_fk")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("inventory_dot_core.Models.Departments", b =>
                {
                    b.HasOne("inventory_dot_core.Models.Departments", "DepartmentParent")
                        .WithMany("InverseDepartmentParent")
                        .HasForeignKey("DepartmentParentId")
                        .HasConstraintName("departments_departments_fk");

                    b.HasOne("inventory_dot_core.Models.Region", "DepartmentRegion")
                        .WithMany("Departments")
                        .HasForeignKey("DepartmentRegionId")
                        .HasConstraintName("departments_region_fk")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("inventory_dot_core.Models.Employees", b =>
                {
                    b.HasOne("inventory_dot_core.Models.Offices", "EmployeeOffice")
                        .WithMany("Employees")
                        .HasForeignKey("EmployeeOfficeId")
                        .HasConstraintName("employees_offices_fk")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("inventory_dot_core.Models.Positions", "EmployeePosition")
                        .WithMany("Employees")
                        .HasForeignKey("EmployeePositionId")
                        .HasConstraintName("employees_positions_fk")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("inventory_dot_core.Models.Region", "EmployeeRegion")
                        .WithMany("Employees")
                        .HasForeignKey("EmployeeRegionId")
                        .HasConstraintName("employees_region_fk")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("inventory_dot_core.Models.Houses", b =>
                {
                    b.HasOne("inventory_dot_core.Models.Region", "HousesRegion")
                        .WithMany("Houses")
                        .HasForeignKey("HousesRegionId")
                        .HasConstraintName("houses_region_fk")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("inventory_dot_core.Models.Offices", b =>
                {
                    b.HasOne("inventory_dot_core.Models.Houses", "OfficeHouses")
                        .WithMany("Offices")
                        .HasForeignKey("OfficeHousesId")
                        .HasConstraintName("offices_houses_fk")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("inventory_dot_core.Models.Positions", b =>
                {
                    b.HasOne("inventory_dot_core.Models.Departments", "PositionDepartment")
                        .WithMany("Positions")
                        .HasForeignKey("PositionDepartmentId")
                        .HasConstraintName("positions_departments_fk")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("inventory_dot_core.Models.RelHardwareEmployee", b =>
                {
                    b.HasOne("inventory_dot_core.Models.Employees", "RelheEmployee")
                        .WithMany("RelHardwareEmployee")
                        .HasForeignKey("RelheEmployeeId")
                        .HasConstraintName("rel_hardware_employee_employees_fk");

                    b.HasOne("inventory_dot_core.Models.WealthHardware", "RelheWhard")
                        .WithMany("RelHardwareEmployee")
                        .HasForeignKey("RelheWhardId")
                        .HasConstraintName("rel_hardware_employee_wealth_hardware_fk");
                });

            modelBuilder.Entity("inventory_dot_core.Models.RelOfficeResponsEmployee", b =>
                {
                    b.HasOne("inventory_dot_core.Models.Employees", "RoeEmployee")
                        .WithMany("RelOfficeResponsEmployee")
                        .HasForeignKey("RoeEmployeeId")
                        .HasConstraintName("rel_office_respons_employee_employees_fk")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("inventory_dot_core.Models.Offices", "RoeOffice")
                        .WithMany("RelOfficeResponsEmployee")
                        .HasForeignKey("RoeOfficeId")
                        .HasConstraintName("rel_office_respons_employee_offices_fk")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("inventory_dot_core.Models.RelSoftwareHardware", b =>
                {
                    b.HasOne("inventory_dot_core.Models.WealthHardware", "RelshWhard")
                        .WithMany("RelSoftwareHardware")
                        .HasForeignKey("RelshWhardId")
                        .HasConstraintName("rel_software_hardware_wealth_hardware_fk")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("inventory_dot_core.Models.WealthSoftware", "RelshWsoft")
                        .WithMany("RelSoftwareHardware")
                        .HasForeignKey("RelshWsoftId")
                        .HasConstraintName("rel_software_hardware_wealth_software_fk")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("inventory_dot_core.Models.WealthHardware", b =>
                {
                    b.HasOne("inventory_dot_core.Models.Employees", "WhardMolEmployee")
                        .WithMany("WealthHardware")
                        .HasForeignKey("WhardMolEmployeeId")
                        .HasConstraintName("wealth_hardware_employees_fk")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("inventory_dot_core.Models.Offices", "WhardOffice")
                        .WithMany("WealthHardware")
                        .HasForeignKey("WhardOfficeId")
                        .HasConstraintName("wealth_hardware_offices_fk");

                    b.HasOne("inventory_dot_core.Models.Region", "WhardRegion")
                        .WithMany("WealthHardware")
                        .HasForeignKey("WhardRegionId")
                        .HasConstraintName("wealth_hardware_region_fk")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("inventory_dot_core.Models.WealthCategories", "WhardWcat")
                        .WithMany("WealthHardware")
                        .HasForeignKey("WhardWcatId")
                        .HasConstraintName("wealth_hardware_wealth_categories_fk");

                    b.HasOne("inventory_dot_core.Models.WealthTypes", "WhardWtype")
                        .WithMany("WealthHardware")
                        .HasForeignKey("WhardWtypeId")
                        .HasConstraintName("wealth_hardware_wealth_types_fk");
                });

            modelBuilder.Entity("inventory_dot_core.Models.WealthSoftware", b =>
                {
                    b.HasOne("inventory_dot_core.Models.Region", "WsoftRegion")
                        .WithMany("WealthSoftware")
                        .HasForeignKey("WsoftRegionId")
                        .HasConstraintName("wealth_software_region_fk")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("inventory_dot_core.Models.WealthCategories", "WsoftWcat")
                        .WithMany("WealthSoftware")
                        .HasForeignKey("WsoftWcatId")
                        .HasConstraintName("wealth_software_wealth_categories_fk")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("inventory_dot_core.Models.WealthTypes", "WsoftWtype")
                        .WithMany("WealthSoftware")
                        .HasForeignKey("WsoftWtypeId")
                        .HasConstraintName("wealth_software_wealth_types_fk")
                        .OnDelete(DeleteBehavior.SetNull);
                });
#pragma warning restore 612, 618
        }
    }
}
